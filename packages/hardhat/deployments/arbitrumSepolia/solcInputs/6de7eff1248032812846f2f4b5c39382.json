{
  "language": "Solidity",
  "sources": {
    "contracts/FactoryPrestaciones.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Prestaciones.sol\";\r\n\r\ncontract FactoryPrestaciones {\r\n\r\n    address public owner;\r\n    mapping(address => Prestaciones) public listaEmpresas;\r\n\r\n    event CreacionEmpresa(address indexed owner, string _nombreEmpresa, string _idEmpresa);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Creación de Empresa\r\n    function crearEmpresa(string memory _nombreEmpresa, string memory _idEmpresa) public {\r\n        Prestaciones nuevaEmpresa = new Prestaciones(msg.sender, _nombreEmpresa, _idEmpresa);\r\n        listaEmpresas[msg.sender] = nuevaEmpresa;\r\n\r\n        emit CreacionEmpresa(owner, _nombreEmpresa, _idEmpresa);\r\n    }\r\n}"
    },
    "contracts/Prestaciones.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAave {\r\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\r\n    function withdraw(address asset, uint256 amount, address to) external returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract Prestaciones {\r\n    uint256 idSolicitudes = 0;\r\n    uint256 idTrabajadores = 0;\r\n    address public empresa;\r\n    string public nombreEmpresa;\r\n    string public idEmpresa;\r\n\r\n    uint8 public constant PORCENTAJE_MAXIMO_RETIRO = 50;\r\n    address public aave;\r\n    address public asset;\r\n\r\n    struct Trabajador {\r\n        string cedula;\r\n        string nombre;\r\n        uint256 saldo;\r\n        uint8 porcentajeRetirado;       // TODO: reiniciar cada cierto tiempo\r\n        uint256 ultimaFechaDeposito;\r\n        bool estatus;\r\n    }\r\n\r\n    enum EstadoSolicitud {Pendiente, Aprobada, Rechazada}\r\n    enum RetiroSolicitud {Total, Intereses, Porcentaje}\r\n    struct SolicitudRetiro {\r\n//        address trabajador; \r\n        RetiroSolicitud tipo;   // \"Total\", \"Intereses\", \"Porcentaje\"\r\n        uint8 porcentaje;       // Solo se usa si el Retiro es \"Porcentaje\"\r\n        EstadoSolicitud estado; // \"En espera\", \"Aceptada\", \"Rechazada\"\r\n        uint256 fechaSolicitud;\r\n    }\r\n\r\n    mapping(address => Trabajador) public trabajadores;\r\n    address[] public listaTrabajadores;\r\n\r\n    mapping(address => SolicitudRetiro) public solicitudesRetiro;\r\n//    mapping(uint256 => SolicitudRetiro) public solicitudesRetiro;\r\n//    address[] public listaSolicitudes;\r\n\r\n    event TrabajadorRegistrado(address indexed trabajador, string cedula, string nombre, string fechaIngreso);\r\n//    event TrabajadorRetirado(address indexed trabajador, string cedula, string nombre);\r\n//    event PrestacionesActualizadas(address indexed trabajador, uint256 saldo, uint8 porcentajeRetirado);\r\n//    event RetiroRealizado(address indexed trabajador, uint256 monto);\r\n    event DepositoPrestaciones(address indexed trabajador, uint256 monto);\r\n    event RetiroSolicitado(address indexed trabajador, RetiroSolicitud tipo);\r\n    event RespuestaSolicitud(address indexed trabajador, EstadoSolicitud estado);\r\n\r\n    modifier soloEmpresa() {\r\n        require(msg.sender == empresa, \"Solo la empresa puede realizar esta accion\");\r\n        _;\r\n    }\r\n    modifier unaVezAlMes(address _trabajador) {\r\n        require(block.timestamp >= trabajadores[_trabajador].ultimaFechaDeposito + 30 days, \"Solo se puede depositar una vez al mes\");\r\n        _;\r\n    }\r\n    modifier trabajadorActivo() {\r\n        require(trabajadores[msg.sender].estatus, \"El trabajador no esta activo\");\r\n        _;\r\n    }\r\n\r\n    constructor(address responsable_empresa, string memory _nombreEmpresa, string memory _idEmpresa) {\r\n        empresa = responsable_empresa;\r\n        nombreEmpresa = _nombreEmpresa;\r\n        idEmpresa = _idEmpresa;\r\n    }\r\n\r\n    // Configuracion del Aave\r\n    function configurarStakProtocol (address _aave, address _asset) public soloEmpresa {\r\n        aave = _aave;\r\n        asset = _asset;\r\n    }\r\n\r\n    // Crea la Contratación/Registro de un Trabajador\r\n    function registrarTrabajador(address _trabajador, string memory _cedula, string memory _nombre, string memory _fechaIngreso) public soloEmpresa {\r\n        Trabajador memory nuevoTrabajador = Trabajador({\r\n            cedula: _cedula,\r\n            nombre: _nombre,\r\n            saldo: 0,\r\n            porcentajeRetirado: 0,\r\n            ultimaFechaDeposito: 0,\r\n            estatus: true\r\n        });\r\n\r\n        trabajadores[_trabajador] = nuevoTrabajador;\r\n        listaTrabajadores.push(_trabajador);\r\n\r\n       emit TrabajadorRegistrado(_trabajador, _cedula, _nombre, _fechaIngreso);\r\n    }\r\n    // Finaliza la Contratación de un Trabajador\r\n    function finalizarContratacion(address _trabajador) public soloEmpresa {\r\n        require(trabajadores[_trabajador].estatus, \"El trabajador no esta activo\");\r\n        Trabajador storage trabajador = trabajadores[_trabajador];\r\n        trabajador.estatus = false;\r\n\r\n//        emit TrabajadorRetirado(_trabajador, _cedula, _nombre);\r\n    }\r\n\r\n    // Deposita las Prestaciones al Trabajador, aumenta su Saldo y las mete en Staking\r\n    function depositarPrestaciones(address _trabajador, uint256 _monto) public payable soloEmpresa unaVezAlMes(_trabajador) {\r\n        require(trabajadores[_trabajador].estatus, \"El trabajador no esta activo\");\r\n        // Se le incrementa el Saldo y se deposita en Stake\r\n        require(_monto == msg.value, \"Monto y cantidad depositada no coincide\");\r\n        Trabajador storage trabajador = trabajadores[_trabajador];\r\n        trabajador.saldo += _monto;\r\n        _stake(_trabajador, _monto);\r\n\r\n        trabajador.ultimaFechaDeposito = block.timestamp;\r\n        emit DepositoPrestaciones(_trabajador, _monto);\r\n    }\r\n\r\n    // Consulta los Intereses del Trabajador\r\n    function consultarIntereses(address _trabajador) public view returns (uint256) {\r\n        uint256 balanceAave = consultarBalanceAave(_trabajador);\r\n        uint256 saldo = trabajadores[_trabajador].saldo;\r\n        return balanceAave > saldo ? balanceAave - saldo : 0;\r\n    }\r\n\r\n    // Envía la Solicitud de Retiro\r\n    function solicitarRetiro(RetiroSolicitud _tipoRetiro, uint8 _porcentaje) public trabajadorActivo {\r\n        address _trabajador = msg.sender;\r\n        require(\r\n            _tipoRetiro == RetiroSolicitud.Total ||\r\n            _tipoRetiro == RetiroSolicitud.Intereses ||\r\n            _tipoRetiro == RetiroSolicitud.Porcentaje,\r\n            \"Tipo de retiro invalido\"\r\n        );\r\n        // Se almacena la Solicitud\r\n        if (_tipoRetiro == RetiroSolicitud.Total) { _porcentaje = 100; }\r\n        SolicitudRetiro memory nuevaSolicitud = SolicitudRetiro({\r\n            tipo: _tipoRetiro,\r\n            porcentaje: _porcentaje,\r\n            estado: EstadoSolicitud.Pendiente,\r\n            fechaSolicitud: block.timestamp\r\n        });\r\n        solicitudesRetiro[_trabajador] = nuevaSolicitud;\r\n\r\n        emit RetiroSolicitado(_trabajador, _tipoRetiro);\r\n    }\r\n\r\n    // La Empresa Rechaza la Solicitud\r\n    function rechazarSolicitud(address _trabajador) public soloEmpresa {\r\n        // Revisar que el Trabajo existe\r\n        SolicitudRetiro storage solicitud = solicitudesRetiro[_trabajador];\r\n        solicitud.estado = EstadoSolicitud.Rechazada;\r\n        emit RespuestaSolicitud(_trabajador, EstadoSolicitud.Rechazada);\r\n    }\r\n\r\n    // La Empresa Acepta la Solicitud\r\n    function aceptarSolicitud(address _trabajador) public soloEmpresa {\r\n        // Revisar que el Trabajo existe\r\n        SolicitudRetiro storage solicitud = solicitudesRetiro[_trabajador];\r\n        Trabajador storage trabajador = trabajadores[_trabajador];\r\n\r\n        if (solicitud.tipo == RetiroSolicitud.Total) {\r\n            _unstake(_trabajador, consultarBalanceAave(_trabajador));\r\n            trabajador.saldo = 0;\r\n        } else if (solicitud.tipo == RetiroSolicitud.Intereses) {\r\n            uint256 intereses = consultarIntereses(_trabajador);\r\n            _unstake(_trabajador, intereses);\r\n            trabajador.saldo = consultarBalanceAave(_trabajador);\r\n        } else if (solicitud.tipo == RetiroSolicitud.Porcentaje) {\r\n            require(solicitud.porcentaje + trabajador.porcentajeRetirado <= PORCENTAJE_MAXIMO_RETIRO, \"Ya has retirado el maximo permitido\");\r\n            uint256 montoRetiro = (trabajador.saldo * solicitud.porcentaje) / 100;\r\n            _unstake(_trabajador, montoRetiro);\r\n            trabajador.porcentajeRetirado += solicitud.porcentaje;\r\n            trabajador.saldo = consultarBalanceAave(_trabajador);\r\n        }\r\n\r\n        solicitud.estado = EstadoSolicitud.Aprobada;\r\n        emit RespuestaSolicitud(_trabajador, EstadoSolicitud.Aprobada);\r\n    }\r\n\r\n    // Función Modelo de Arbitraje\r\n    function arbitraje() public soloEmpresa view returns (bool) {\r\n        // La empresa puede depositar fondos en el contrato\r\n        return true;\r\n    }\r\n\r\n    // Función privada para hacer staking en Aave\r\n    function _stake(address _trabajador, uint256 _monto) private soloEmpresa {\r\n        IAave(aave).deposit(asset, _monto, _trabajador, 0);\r\n    }\r\n    // Función privada para hacer unstaking en Aave\r\n    function _unstake(address _trabajador, uint256 _monto) private soloEmpresa {\r\n        IAave(aave).withdraw(asset, _monto, _trabajador);\r\n    }\r\n    // Función pública para consultar el balance en Aave\r\n    function consultarBalanceAave(address _trabajador) public view returns (uint256) {\r\n        return IAave(aave).balanceOf(_trabajador);\r\n    }\r\n\r\n    // Función para Listar Trabajadores\r\n    function obtenerTrabajadores() public view returns (address[] memory) {\r\n        return listaTrabajadores;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}